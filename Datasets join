{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c8f12968",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-27T15:11:17.892362Z",
     "iopub.status.busy": "2024-09-27T15:11:17.891547Z",
     "iopub.status.idle": "2024-09-27T15:11:18.875874Z",
     "shell.execute_reply": "2024-09-27T15:11:18.874758Z"
    },
    "papermill": {
     "duration": 0.996478,
     "end_time": "2024-09-27T15:11:18.878466",
     "exception": false,
     "start_time": "2024-09-27T15:11:17.881988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/datasetsveridion/website_dataset.csv\n",
      "/kaggle/input/datasetsveridion/google_dataset.csv\n",
      "/kaggle/input/datasetsveridion/facebook_dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da8d9938",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:11:18.895391Z",
     "iopub.status.busy": "2024-09-27T15:11:18.894857Z",
     "iopub.status.idle": "2024-09-27T15:12:13.117319Z",
     "shell.execute_reply": "2024-09-27T15:12:13.115976Z"
    },
    "papermill": {
     "duration": 54.23421,
     "end_time": "2024-09-27T15:12:13.120254",
     "exception": false,
     "start_time": "2024-09-27T15:11:18.886044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pyspark\r\n",
      "  Downloading pyspark-3.5.3.tar.gz (317.3 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m317.3/317.3 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n",
      "\u001b[?25hRequirement already satisfied: py4j==0.10.9.7 in /opt/conda/lib/python3.10/site-packages (from pyspark) (0.10.9.7)\r\n",
      "Building wheels for collected packages: pyspark\r\n",
      "  Building wheel for pyspark (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \bdone\r\n",
      "\u001b[?25h  Created wheel for pyspark: filename=pyspark-3.5.3-py2.py3-none-any.whl size=317840628 sha256=bbd375bee2cad6a9f66f38600c943a003e0c00bbd1cde9dd658f09a9061ad821\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/1b/3a/92/28b93e2fbfdbb07509ca4d6f50c5e407f48dce4ddbda69a4ab\r\n",
      "Successfully built pyspark\r\n",
      "Installing collected packages: pyspark\r\n",
      "Successfully installed pyspark-3.5.3\r\n"
     ]
    }
   ],
   "source": [
    "!pip install pyspark"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ba54b9b",
   "metadata": {
    "papermill": {
     "duration": 0.016782,
     "end_time": "2024-09-27T15:12:13.154161",
     "exception": false,
     "start_time": "2024-09-27T15:12:13.137379",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Company Data Merger using PySpark\n",
    "\n",
    "In this notebook, I'll merge and analyze company data from three different sources: Facebook, Google, and company websites. I chose Python for this task.\n",
    "\n",
    "## Setup and Data Loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "522ca9d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:13.190560Z",
     "iopub.status.busy": "2024-09-27T15:12:13.190168Z",
     "iopub.status.idle": "2024-09-27T15:12:19.074955Z",
     "shell.execute_reply": "2024-09-27T15:12:19.073648Z"
    },
    "papermill": {
     "duration": 5.906908,
     "end_time": "2024-09-27T15:12:19.078040",
     "exception": false,
     "start_time": "2024-09-27T15:12:13.171132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Setting default log level to \"WARN\".\n",
      "To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n",
      "24/09/27 15:12:17 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import col, lower, trim, when, coalesce, regexp_replace, split, element_at, concat_ws, lit, length\n",
    "from pyspark.sql.types import StringType, StructType, StructField\n",
    "from pyspark.sql import functions as F\n",
    "\n",
    "# Create SparkSession\n",
    "spark = SparkSession.builder \\\n",
    "    .appName('Company Data Merger') \\\n",
    "    .getOrCreate()\n",
    "\n",
    "# Set log level to WARN to reduce verbosity\n",
    "spark.sparkContext.setLogLevel(\"WARN\")\n",
    "\n",
    "def load_datasets():\n",
    "    \"\"\"\n",
    "    Load the three datasets from CSV files.\n",
    "    \"\"\"\n",
    "    facebook_schema = StructType([\n",
    "        StructField(\"domain\", StringType(), True),\n",
    "        StructField(\"address\", StringType(), True),\n",
    "        StructField(\"categories\", StringType(), True),\n",
    "        StructField(\"city\", StringType(), True),\n",
    "        StructField(\"country_code\", StringType(), True),\n",
    "        StructField(\"country_name\", StringType(), True),\n",
    "        StructField(\"description\", StringType(), True),\n",
    "        StructField(\"email\", StringType(), True),\n",
    "        StructField(\"link\", StringType(), True),\n",
    "        StructField(\"name\", StringType(), True),\n",
    "        StructField(\"page_type\", StringType(), True),\n",
    "        StructField(\"phone\", StringType(), True),\n",
    "        StructField(\"phone_country_code\", StringType(), True),\n",
    "        StructField(\"region_code\", StringType(), True),\n",
    "        StructField(\"region_name\", StringType(), True),\n",
    "        StructField(\"zip_code\", StringType(), True)\n",
    "    ])\n",
    "    \n",
    "    google_schema = StructType([\n",
    "        StructField(\"address\", StringType(), True),\n",
    "        StructField(\"category\", StringType(), True),\n",
    "        StructField(\"city\", StringType(), True),\n",
    "        StructField(\"country_code\", StringType(), True),\n",
    "        StructField(\"country_name\", StringType(), True),\n",
    "        StructField(\"name\", StringType(), True),\n",
    "        StructField(\"phone\", StringType(), True),\n",
    "        StructField(\"phone_country_code\", StringType(), True),\n",
    "        StructField(\"raw_address\", StringType(), True),\n",
    "        StructField(\"raw_phone\", StringType(), True),\n",
    "        StructField(\"region_code\", StringType(), True),\n",
    "        StructField(\"region_name\", StringType(), True),\n",
    "        StructField(\"text\", StringType(), True),\n",
    "        StructField(\"zip_code\", StringType(), True),\n",
    "        StructField(\"domain\", StringType(), True)\n",
    "    ])\n",
    "    \n",
    "    website_schema = StructType([\n",
    "        StructField(\"root_domain\", StringType(), True),\n",
    "        StructField(\"domain_suffix\", StringType(), True),\n",
    "        StructField(\"language\", StringType(), True),\n",
    "        StructField(\"legal_name\", StringType(), True),\n",
    "        StructField(\"main_city\", StringType(), True),\n",
    "        StructField(\"main_country\", StringType(), True),\n",
    "        StructField(\"main_region\", StringType(), True),\n",
    "        StructField(\"phone\", StringType(), True),\n",
    "        StructField(\"site_name\", StringType(), True),\n",
    "        StructField(\"tld\", StringType(), True),\n",
    "        StructField(\"s_category\", StringType(), True)\n",
    "    ])\n",
    "\n",
    "    facebook_df = spark.read.csv('/kaggle/input/datasetsveridion/facebook_dataset.csv', header=True, schema=facebook_schema)\n",
    "    google_df = spark.read.csv('/kaggle/input/datasetsveridion/google_dataset.csv', header=True, schema=google_schema)\n",
    "    website_df = spark.read.csv('/kaggle/input/datasetsveridion/website_dataset.csv', header=True, schema=website_schema, sep=';')\n",
    "    \n",
    "    return {'facebook': facebook_df, 'google': google_df, 'website': website_df}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40576378",
   "metadata": {
    "papermill": {
     "duration": 0.017622,
     "end_time": "2024-09-27T15:12:19.113145",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.095523",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I start by setting up our PySpark session and loading our datasets. I use `inferSchema=True` to automatically detect the data types of our columns, which can save time and reduce errors in data processing.\n",
    "\n",
    "## Data Preprocessing\n",
    "\n",
    "Before merging our datasets, I need to preprocess them to ensure consistency in column names and data formats."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1c710759",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.149536Z",
     "iopub.status.busy": "2024-09-27T15:12:19.149143Z",
     "iopub.status.idle": "2024-09-27T15:12:19.159923Z",
     "shell.execute_reply": "2024-09-27T15:12:19.158819Z"
    },
    "papermill": {
     "duration": 0.032224,
     "end_time": "2024-09-27T15:12:19.162403",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.130179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def preprocess_data(df, source):\n",
    "    \"\"\"\n",
    "    Preprocess the data by cleaning and standardizing columns.\n",
    "    \"\"\"\n",
    "    # Lowercase column names\n",
    "    for col_name in df.columns:\n",
    "        df = df.withColumnRenamed(col_name, col_name.lower())\n",
    "    \n",
    "    # Strip whitespace from string columns\n",
    "    string_columns = [f.name for f in df.schema.fields if isinstance(f.dataType, StringType)]\n",
    "    for col_name in string_columns:\n",
    "        df = df.withColumn(col_name, trim(col(col_name)))\n",
    "\n",
    "    # Handle specific column renaming for different sources\n",
    "    if source == 'facebook':\n",
    "        df = df.withColumnRenamed(\"country_code\", \"country\") \\\n",
    "               .withColumnRenamed(\"region_code\", \"region\") \\\n",
    "               .withColumnRenamed(\"categories\", \"category\") \\\n",
    "               .withColumn(\"domain\", split(col(\"link\"), \"://\").getItem(1).alias(\"domain\"))\n",
    "    elif source == 'website':\n",
    "        df = df.withColumnRenamed(\"main_country\", \"country\") \\\n",
    "               .withColumnRenamed(\"main_region\", \"region\") \\\n",
    "               .withColumnRenamed(\"main_city\", \"city\") \\\n",
    "               .withColumnRenamed(\"s_category\", \"category\") \\\n",
    "               .withColumnRenamed(\"legal_name\", \"name\") \\\n",
    "               .withColumn(\"domain\", concat_ws(\".\", col(\"root_domain\"), col(\"domain_suffix\")))\n",
    "    \n",
    "        \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9d6f9b72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.198763Z",
     "iopub.status.busy": "2024-09-27T15:12:19.198319Z",
     "iopub.status.idle": "2024-09-27T15:12:19.207528Z",
     "shell.execute_reply": "2024-09-27T15:12:19.206403Z"
    },
    "papermill": {
     "duration": 0.030216,
     "end_time": "2024-09-27T15:12:19.209963",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.179747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def standardize_country(df):\n",
    "    country_mapping = {\n",
    "        'ca': 'canada',\n",
    "        'us': 'united states',\n",
    "        'usa': 'united states',\n",
    "        'gb': 'united kingdom',\n",
    "        'uk': 'united kingdom',\n",
    "        'au': 'australia',\n",
    "        'fr': 'france',\n",
    "        'de': 'germany',\n",
    "    }\n",
    "    \n",
    "    # Identify all potential country-related columns\n",
    "    potential_country_cols = ['country', 'country_name', 'country_code', 'main_country']\n",
    "    existing_country_cols = [col_name for col_name in potential_country_cols if col_name in df.columns]\n",
    "    \n",
    "    if existing_country_cols:\n",
    "        # Apply mapping using a broadcast join for better performance\n",
    "        mapping_df = spark.createDataFrame(list(country_mapping.items()), ['abbr', 'full_name'])\n",
    "        country_expr = coalesce(*[lower(col(c)) for c in existing_country_cols])\n",
    "        df = df.join(mapping_df, country_expr == col('abbr'), how='left')\n",
    "        df = df.withColumn('country', coalesce(col('full_name'), country_expr)).drop('abbr', 'full_name')\n",
    "    \n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4eb888f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.246355Z",
     "iopub.status.busy": "2024-09-27T15:12:19.245955Z",
     "iopub.status.idle": "2024-09-27T15:12:19.253107Z",
     "shell.execute_reply": "2024-09-27T15:12:19.251911Z"
    },
    "papermill": {
     "duration": 0.028058,
     "end_time": "2024-09-27T15:12:19.255461",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.227403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pyspark.sql import DataFrame\n",
    "\n",
    "def standardize_data(df: DataFrame) -> DataFrame:\n",
    "    # Standardize 'phone' format to remove non-numeric characters except '+'\n",
    "    df = df.withColumn('phone', F.regexp_replace(F.col('phone'), '[^\\d+]', ''))\n",
    "    \n",
    "    # Standardize 'country_code' to lowercase\n",
    "    df = df.withColumn('country_code', F.lower(F.col('country_code')))\n",
    "    \n",
    "    # Standardize 'zip_code' by removing spaces\n",
    "    df = df.withColumn('zip_code', F.regexp_replace(F.col('zip_code'), '\\s+', ''))\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23615266",
   "metadata": {
    "papermill": {
     "duration": 0.016905,
     "end_time": "2024-09-27T15:12:19.289657",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.272752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In the preprocessing step, I:\n",
    "1. Convert all column names to lowercase for consistency.\n",
    "2. Remove any leading or trailing whitespace from string columns.\n",
    "3. Standardize column names across datasets. This is crucial for successful merging later on, as well as visualization.\n",
    "\n",
    "## Merging Datasets\n",
    "\n",
    "Now that our data is preprocessed, I can merge the datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7f8f3fce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.325947Z",
     "iopub.status.busy": "2024-09-27T15:12:19.325518Z",
     "iopub.status.idle": "2024-09-27T15:12:19.334398Z",
     "shell.execute_reply": "2024-09-27T15:12:19.333362Z"
    },
    "papermill": {
     "duration": 0.029769,
     "end_time": "2024-09-27T15:12:19.336751",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.306982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def rename_columns(df, suffix):\n",
    "    \n",
    "    # Rename all columns except 'domain'\n",
    "    new_columns = [col(column).alias(f\"{column}{suffix}\") if column != \"domain\" else col(column) for column in df.columns]\n",
    "    \n",
    "    return df.select(*new_columns)\n",
    "\n",
    "def merge_datasets(datasets):\n",
    "    # Start with Google dataset as the base\n",
    "    base_df = datasets['google']\n",
    "    \n",
    "    for source in ['facebook', 'website']:\n",
    "        join_cols = ['domain']  # Add more columns if needed for a more robust join\n",
    "        source_df = datasets[source].select(*join_cols, *[col(c).alias(f\"{c}_{source}\") for c in datasets[source].columns if c not in join_cols])\n",
    "        base_df = base_df.join(source_df, on=join_cols, how='full_outer')\n",
    "    \n",
    "    return base_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20acfb15",
   "metadata": {
    "papermill": {
     "duration": 0.0184,
     "end_time": "2024-09-27T15:12:19.372487",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.354087",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "I use a full outer join on the 'domain' column to merge our datasets. This ensures we keep all records from all datasets, even if there's no match in other datasets. I use the Google dataset as our base, then merge in Facebook and Website data.\n",
    "\n",
    "## Resolving Conflicts\n",
    "\n",
    "After merging, we may have conflicting information from different sources. I need to resolve these conflicts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8a733f30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.409332Z",
     "iopub.status.busy": "2024-09-27T15:12:19.408932Z",
     "iopub.status.idle": "2024-09-27T15:12:19.418233Z",
     "shell.execute_reply": "2024-09-27T15:12:19.417035Z"
    },
    "papermill": {
     "duration": 0.030609,
     "end_time": "2024-09-27T15:12:19.420504",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.389895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def resolve_conflicts(merged_df):\n",
    "    columns_to_resolve = ['name', 'category', 'address', 'city', 'country', 'phone', 'region_code', 'zip_code']\n",
    "    \n",
    "    for column in columns_to_resolve:\n",
    "        sources = ['google', 'facebook', 'website']\n",
    "        coalesce_cols = [col(f\"{column}_{source}\") for source in sources if f\"{column}_{source}\" in merged_df.columns]\n",
    "        coalesce_cols.append(col(column))  # Add original column if it exists\n",
    "        \n",
    "        merged_df = merged_df.withColumn(column, coalesce(*coalesce_cols))\n",
    "    \n",
    "    # Drop unnecessary columns\n",
    "    columns_to_drop = [c for c in merged_df.columns if '_google' in c or '_facebook' in c or '_website' in c]\n",
    "    phone_cols = [col(c) for c in merged_df.columns if c.startswith(\"phone\") and c != \"phone_country_code\"]\n",
    "    merged_df = merged_df.withColumn(\"phone\", coalesce(*phone_cols))\n",
    "    merged_df = merged_df.drop(*columns_to_drop)\n",
    "    \n",
    "    return merged_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d34ef710",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.457232Z",
     "iopub.status.busy": "2024-09-27T15:12:19.456832Z",
     "iopub.status.idle": "2024-09-27T15:12:19.471244Z",
     "shell.execute_reply": "2024-09-27T15:12:19.470000Z"
    },
    "papermill": {
     "duration": 0.035955,
     "end_time": "2024-09-27T15:12:19.473954",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.437999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pyspark.sql import DataFrame\n",
    "from itertools import chain\n",
    "\n",
    "# Imputation and Standardization Functions\n",
    "def impute_missing_values(df: DataFrame) -> DataFrame:\n",
    "    columns_to_impute = ['country_name', 'country_code', 'address', 'city', 'phone_country_code', 'phone', 'region', 'zip_code']\n",
    "    \n",
    "    for column in columns_to_impute:\n",
    "        if column in df.columns:\n",
    "            # Impute missing values with 'Unknown'\n",
    "            df = df.withColumn(column, F.coalesce(F.col(column), F.lit('Unknown')))\n",
    "    \n",
    "    # Impute 'country_code' based on 'country_name' where applicable\n",
    "        if 'country_code' in df.columns and 'country_name' in df.columns:\n",
    "            country_code_map = {\n",
    "            'united states': 'us', \n",
    "            'canada': 'ca', \n",
    "            'united kingdom': 'gb', \n",
    "            'australia': 'au', \n",
    "            'france': 'fr', \n",
    "            'germany': 'de'\n",
    "            }\n",
    "            df = df.withColumn(\n",
    "            'country_code',\n",
    "            F.coalesce(\n",
    "                F.col('country_code'), \n",
    "                F.create_map([F.lit(x) for x in chain(*country_code_map.items())])\n",
    "                .getItem(F.lower(F.col('country_name')))\n",
    "            )\n",
    "        )\n",
    "        \n",
    "    # Impute missing 'address' with 'Unknown'\n",
    "    df = df.withColumn('address', F.coalesce(F.col('address'), F.lit('Unknown')))\n",
    "    \n",
    "    # Impute missing 'city' with 'Unknown'\n",
    "    df = df.withColumn('city', F.coalesce(F.col('city'), F.lit('Unknown')))\n",
    "    \n",
    "    # Impute missing 'country_name' with 'Unknown'\n",
    "    df = df.withColumn('country_name', F.coalesce(F.col('country_name'), F.lit('Unknown')))\n",
    "    \n",
    "    # Impute missing 'phone_country_code' with 'Unknown'\n",
    "    df = df.withColumn('phone_country_code', F.coalesce(F.col('phone_country_code'), F.lit('Unknown')))\n",
    "    \n",
    "    # Impute missing 'phone' with 'Unknown'\n",
    "    df = df.withColumn('phone', F.coalesce(F.col('phone'), F.lit('Unknown')))\n",
    "    \n",
    "    # Impute missing 'zip_code' with 'Unknown'\n",
    "    df = df.withColumn('zip_code', F.coalesce(F.col('zip_code'), F.lit('Unknown')))\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d457f255",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.511095Z",
     "iopub.status.busy": "2024-09-27T15:12:19.510682Z",
     "iopub.status.idle": "2024-09-27T15:12:19.519188Z",
     "shell.execute_reply": "2024-09-27T15:12:19.517991Z"
    },
    "papermill": {
     "duration": 0.030078,
     "end_time": "2024-09-27T15:12:19.521676",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.491598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def validate_data(df):\n",
    "    # Check for misplaced data.\n",
    "    df = df.withColumn(\"city\", when(col(\"city\").rlike(\"^[A-Za-z\\s]+$\"), col(\"city\")).otherwise(lit(None)))\n",
    "    \n",
    "    # Ensure phone numbers are in correct format again.\n",
    "    df = df.withColumn(\"phone\", when(col(\"phone\").rlike(\"^\\+?[0-9\\-\\s()]+$\"), col(\"phone\")).otherwise(lit(None)))\n",
    "    \n",
    "    # Validate country codes.\n",
    "    valid_country_codes = [\"us\", \"ca\", \"gb\", \"au\", \"fr\", \"de\"]  \n",
    "    df = df.withColumn(\"country_code\", when(lower(col(\"country_code\")).isin(valid_country_codes), lower(col(\"country_code\"))).otherwise(lit(None)))\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5e8ce3ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.558680Z",
     "iopub.status.busy": "2024-09-27T15:12:19.558297Z",
     "iopub.status.idle": "2024-09-27T15:12:19.565992Z",
     "shell.execute_reply": "2024-09-27T15:12:19.564746Z"
    },
    "papermill": {
     "duration": 0.028955,
     "end_time": "2024-09-27T15:12:19.568322",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.539367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def data_quality_checks(df):\n",
    "    total_rows = df.count()\n",
    "    print(f\"\\nTotal rows: {total_rows}\")\n",
    "    \n",
    "    print(\"\\nMissing value percentages:\")\n",
    "    for column in df.columns:\n",
    "        missing_count = df.filter(col(column).isNull()).count()\n",
    "        missing_percentage = (missing_count / total_rows) * 100\n",
    "        print(f\"{column}: {missing_percentage:.2f}%\")\n",
    "    \n",
    "    print(\"\\nUnique values in key columns:\")\n",
    "    for column in ['country', 'category']:\n",
    "        unique_count = df.select(column).distinct().count()\n",
    "        print(f\"{column}: {unique_count}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e523dd49",
   "metadata": {
    "papermill": {
     "duration": 0.017252,
     "end_time": "2024-09-27T15:12:19.603469",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.586217",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In conflict resolution, I prioritize data in this order: Website > Google > Facebook. This is based on the assumption that a company's own website is likely to have the most up-to-date information, followed by Google, and then Facebook.\n",
    "\n",
    "## Main Execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a56465ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:12:19.641389Z",
     "iopub.status.busy": "2024-09-27T15:12:19.641009Z",
     "iopub.status.idle": "2024-09-27T15:15:11.496577Z",
     "shell.execute_reply": "2024-09-27T15:15:11.495305Z"
    },
    "papermill": {
     "duration": 171.878199,
     "end_time": "2024-09-27T15:15:11.500191",
     "exception": false,
     "start_time": "2024-09-27T15:12:19.621992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Datasets loaded. Sample of each:\n",
      "\n",
      "Facebook dataset:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
n",
      "|domain                 |address                                                                 |category                                                                                            |city     |country|country_name|description                                                                                                                                                            |email                     |link                           |name                                 |page_type    |phone       |phone_country_code|region|region_name     |zip_code|\n",
n",
      "|rossiterboats.com      |NULL                                                                    |Boats & Yachts Dealers|Boat Tours & Cruises                                                         |NULL     |NULL   |NULL        |At Rossiter Boats we build semi-custom power boats for people who love being out on the water whether it's ocean, river, lake or pond. Products Semi-Custom Power boats|info@rossiterboats.com    |http://rossiterboats.com       |Rossiter Boats                       |LocalBusiness|NULL        |NULL              |NULL  |NULL            |NULL    |\n",
      "|collins-cc.edu         |NULL                                                                    |Other schools|High Schools|Community Center|Adult Education Schools|Adult Education Schools         |NULL     |NULL   |NULL        |NULL                                                                                                                                                                   |NULL                      |https://collins-cc.edu         |Collins Career Technical Center      |LocalBusiness|NULL        |NULL              |NULL  |NULL            |NULL    |\n",
      "|lakesidehomeservices.ca|NULL                                                                    |Appliance Repair & Maintenance|Home Builders & Renovation Contractors|Appliance Repair & Maintenance|NULL     |canada |NULL        |NULL                                                                                                                                                                   |NULL                      |https://lakesidehomeservices.ca|Lakeside Home Services               |LocalBusiness|+16138318840|ca                |NULL  |NULL            |NULL    |\n",
      "|caa-architecture.com   |601 cordova st w # 270, v6b 1g1, vancouver, bc, canada, british columbia|Architects & Architectural Services|Other Engineering Services                                      |vancouver|canada |canada      |NULL                                                                                                                                                                   |office@caa-arcitecture.com|http://caa-architecture.com    |Chandler Associates Architecture Inc.|LocalBusiness|+16046873390|ca                |bc    |british columbia|v6b 1g1 |\n",
      "|apexsurety.ca          |unit 3 - 4 donald street, r3l 2t7, winnipeg, mb, canada, manitoba       |NULL                                                                                                |winnipeg |canada |canada      |NULL                                                                                                                                                                   |NULL                      |https://apexsurety.ca          |Apex Surety & Insurance Ltd.         |LocalBusiness|+12045602508|ca                |mb    |manitoba        |r3l 2t7 |\n",
n",
      "only showing top 5 rows\n",
      "\n",
      "Facebook schema:\n",
      "root\n",
      " |-- domain: string (nullable = true)\n",
      " |-- address: string (nullable = true)\n",
      " |-- category: string (nullable = true)\n",
      " |-- city: string (nullable = true)\n",
      " |-- country: string (nullable = true)\n",
      " |-- country_name: string (nullable = true)\n",
      " |-- description: string (nullable = true)\n",
      " |-- email: string (nullable = true)\n",
      " |-- link: string (nullable = true)\n",
      " |-- name: string (nullable = true)\n",
      " |-- page_type: string (nullable = true)\n",
      " |-- phone: string (nullable = true)\n",
      " |-- phone_country_code: string (nullable = true)\n",
      " |-- region: string (nullable = true)\n",
      " |-- region_name: string (nullable = true)\n",
      " |-- zip_code: string (nullable = true)\n",
      "\n",
      "\n",
      "Google dataset:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
n",
      "|address                                                                |category                         |city          |country_code|country_name |name                              |phone       |phone_country_code|raw_address                                             |raw_phone      |region_code|region_name    |text                                                                                                                                                                         |zip_code|domain             |country      |\n",
n",
      "|28 Central Coast Hwy, West Gosford NSW 2250, Australia                 |Fabric-Based Home Goods          |gosford       |au          |australia    |Spotlight West Gosford            |+61243355946|au                |West Gosford NSW, Australia                             |+61 2 4335 5946|nsw        |new south wales|4.1 (766) · Craft store West Gosford NSW, Australia Closed ⋅ Opens 9AM Sun · +61 2 4335 5946 In-store pickup·In-store shopping                                               |2250    |spotlightstores.com|australia    |\n",
      "|NULL                                                                   |Catering & Delivery              |NULL          |NULL        |NULL         |Lakay express                     |NULL        |NULL              |NULL                                                    |NULL           |NULL       |NULL           |5.0 (1) · Mobile caterer Open ⋅ Closes 9PM                                                                                                                                   |NULL    |linktr.ee          |NULL         |\n",
      "|400 Scott St, St. Catharines, ON L2M 3W2, Canada                       |Book Stores                      |st. catharines|ca          |canada       |Heritage Christian Book Store     |+19059374553|ca                |400 Scott St · In Grantham Plaza                        |+1 905-937-4553|on         |ontario        |4.7 (100) · Book store 400 Scott St · In Grantham Plaza Closes soon ⋅ 5PM · +1 905-937-4553 In-store shopping·Curbside pickup·Delivery                                       |l2m 3w2 |bookmanager.com    |canada       |\n",
      "|191 Pleasant St, Yarmouth, NS B5A 2J9, Canada                          |Other Building Material Retailers|yarmouth      |ca          |canada       |Pleasant Timber Mart              |+19027429181|ca                |7+ years in business · Yarmouth, NS, Canada             |+1 902-742-9181|ns         |nova scotia    |4.7 (40) · Building materials store 7+ years in business · Yarmouth, NS, Canada Closed ⋅ Opens 7:30AM Mon · +1 902-742-9181 Curbside pickup·In-store pickup·In-store shopping|b5a 2j9 |timbermart.ca      |canada       |\n",
      "|11040 Santa Monica Blvd Suite 370, Los Angeles, CA 90025, United States|Plastic Surgery Clinics          |los angeles   |us          |united states|Skin Specifics Medical Spa West LA|+18184268353|us                |7+ years in business · 11040 Santa Monica Blvd Suite 370|+1 818-426-8353|ca         |california     |4.3 (15) · Medical spa 7+ years in business · 11040 Santa Monica Blvd Suite 370 Closed ⋅ Opens 9AM Tue · +1 818-426-8353                                                     |90025   |linktr.ee          |united states|\n",
n",
      "only showing top 5 rows\n",
      "\n",
      "Google schema:\n",
      "root\n",
      " |-- address: string (nullable = true)\n",
      " |-- category: string (nullable = true)\n",
      " |-- city: string (nullable = true)\n",
      " |-- country_code: string (nullable = true)\n",
      " |-- country_name: string (nullable = true)\n",
      " |-- name: string (nullable = true)\n",
      " |-- phone: string (nullable = true)\n",
      " |-- phone_country_code: string (nullable = true)\n",
      " |-- raw_address: string (nullable = true)\n",
      " |-- raw_phone: string (nullable = true)\n",
      " |-- region_code: string (nullable = true)\n",
      " |-- region_name: string (nullable = true)\n",
      " |-- text: string (nullable = true)\n",
      " |-- zip_code: string (nullable = true)\n",
      " |-- domain: string (nullable = true)\n",
      " |-- country: string (nullable = true)\n",
      "\n",
      "\n",
      "Website dataset:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------+-------------+--------+------------------------------------------+--------+---------+--------------------+-----------+----------------------+----+----------------------------------+----------------------+\n",
      "|root_domain        |domain_suffix|language|name                                      |city    |country  |region              |phone      |site_name             |tld |category                          |domain                |\n",
      "+-------------------+-------------+--------+------------------------------------------+--------+---------+--------------------+-----------+----------------------+----+----------------------------------+----------------------+\n",
      "|investa.com.au     |com.au       |en      |Investa Wholesale Funds Management Limited|brisbane|australia|queensland          |61282269300|Investa Property Group|au  |Real Estate Developers            |investa.com.au.com.au |\n",
      "|converterman.com   |NULL         |NULL    |NULL                                      |NULL    |NULL     |NULL                |NULL       |NULL                  |NULL|NULL                              |converterman.com      |\n",
      "|clothesencounter.ca|ca           |en      |NULL                                      |cardigan|canada   |prince edward island|13066937766|Clothes Encounter     |ca  |Shoes & Other Footwear Stores     |clothesencounter.ca.ca|\n",
      "|timminsgarage.com  |com          |en      |Timmins Garage Inc.                       |timmins |canada   |ontario             |18775896640|Timmins Garage        |com |Automobile Dealers & Manufacturers|timminsgarage.com.com |\n",
      "|destinate.ca       |ca           |en      |Destinate Group Ltd.                      |NULL    |canada   |NULL                |NULL       |Destinate Group       |ca  |Business Consulting               |destinate.ca.ca       |\n",
      "+-------------------+-------------+--------+------------------------------------------+--------+---------+--------------------+-----------+----------------------+----+----------------------------------+----------------------+\n",
      "only showing top 5 rows\n",
      "\n",
      "Website schema:\n",
      "root\n",
      " |-- root_domain: string (nullable = true)\n",
      " |-- domain_suffix: string (nullable = true)\n",
      " |-- language: string (nullable = true)\n",
      " |-- name: string (nullable = true)\n",
      " |-- city: string (nullable = true)\n",
      " |-- country: string (nullable = true)\n",
      " |-- region: string (nullable = true)\n",
      " |-- phone: string (nullable = true)\n",
      " |-- site_name: string (nullable = true)\n",
      " |-- tld: string (nullable = true)\n",
      " |-- category: string (nullable = true)\n",
      " |-- domain: string (nullable = false)\n",
      "\n",
      "\n",
      "Merged dataset (before conflict resolution):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "24/09/27 15:12:36 WARN SparkStringUtils: Truncated the string representation of a plan since it was too large. This behavior can be adjusted by setting 'spark.sql.debug.maxToStringFields'.\n",
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
n",
      "|summary|domain       |address                                                                                          |category               |city  |country_code|country_name|name                                                   |phone               |phone_country_code|raw_address                                                                            |raw_phone     |region_code|region_name|text                                                                                           |zip_code          |country|address_facebook                                                                                                                                                   |category_facebook                   |city_facebook|country_facebook|country_name_facebook                  |description_facebook|email_facebook            |link_facebook          |name_facebook                   |page_type_facebook                                                                 |phone_facebook                 |phone_country_code_facebook|region_facebook   |region_name_facebook|zip_code_facebook  |root_domain_website|domain_suffix_website|language_website|name_website                                                  |city_website|country_website      |region_website|phone_website        |site_name_website                                            |tld_website|category_website       |\n",
n",
      "|count  |431884       |330552                                                                                           |304870                 |311002|304084      |311039      |356490                                                 |323948              |241258            |311875                                                                                 |328160        |310854     |310854     |353005                                                                                         |273400            |337705 |120333                                                                                                                                                             |209355                              |96316        |116754          |96913                                  ||28096                     |252739                 |252733                          |252711                                                                             |84927                          |58662                      |96308             |96303               |76088              |74145              |71900                |66826           |31989                                                         |60968       |64869                |60935         |65640                |68714                                                        |71757      |70634                  |\n",
      "|mean   |NULL         |NULL                                                                                             |NULL                   |NULL  |1.0         |NULL        |28843.428571428572                                     |1.335193177450023E11|1.0               |NULL                                                                                   |NULL          |NaN        |NULL       |NULL                                                                                           |122429.16264313326|NULL   |62684.555555555555                                                                                                                                                 |31047.25                            |NULL         |NULL            |NULL                                   ||NULL                      |NULL                   |3.82                            |NULL                                                                               |8.429272849289705E10           |1.28940117E10              |26.537224538415725|1.32102783948E10    |3.791283246834939E7|NULL               |NULL                 |NULL            |1.8259557840075E11                                            |NaN         |1.1325712714124243E11|NaN           |1.6766246887632039E12|693.6                                                        |NULL       |NULL                   |\n",
      "|stddev |NULL         |NULL                                                                                             |NULL                   |NULL  |0.0         |NULL        |20983.41034291251                                      |2.853368901530333E12|0.0               |NULL                                                                                   |NULL          |NaN        |NULL       |NULL                                                                                           |2702298.327830179 |NULL   |115848.03076348678                                                                                                                                                 |16840.09598893862                   |NULL         |NULL            |NULL                                   ||NULL                      |NULL                   |NULL                            |NULL                                                                               |3.9912534189678677E12          |NULL                       |25.160532231382295|7.652714703179832E9 |4.232614887094534E9|NULL               |NULL                 |NULL            |3.2040711835041907E11                                         |NaN         |2.5831992150195197E11|NaN           |2.7173464436105384E14|804.9358980689084                                            |NULL       |NULL                   |\n",
      "|min    |             |\"... more bottles, and I try to ration it like it's water in the Sahara, but if it ...\"          |ATVs Dealers & Services|'aiea |001         |afghanistan |!MPACT Theatre                                         |+12012017300        |001               |\"... more bottles, and I try to ration it like it's water in the Sahara, but if it ...\"|(01) 444 5995 |00         |aargau     |#05 Mac Arthur Highway, Paraiso,, #05 MacArthur Highway Closed ⋅ Opens 8:30AM · +63 45 985 0220|000               |ad     |                                                                                                                                                                   |07000                               |100.yil      |ab              |Business Consulting|Business Consulting|!!!We are hiring again!!!! We currently have a range of temporary positions available ; with the opportunity to possibly become full time. General Labourers can be found on almost all job sites doing a wide range of tasks.... Many of the jobs they perform are physically strenuous and may require special training or experience. Responsibilities: * Moving, securing, installing, building, loading, or unloading materials * Assisting in the building or construction of various things * Some specialized tasks may require on-the-job training * Effectively using heavy and light equipment, depending on the job-assignment * Moving items from place to place, according to direction from the site supervisor * There is no minimum educational requirement, but specialized training can help laborers advance * Experience on commercial construction sites * Verifiable work history that shows professional skills and experience * Strong work ethic Must have a full driver's license and access to a working vehicle These jobs are going to start asap and will be a mix of weekends and evenings. Email your resumes to titanelectricalcontractors@gmail.com|1000islandscycle@gmail.com|Colleges & Universities|\"Yale Primary School repps\"     |Additional Information South Indian take out restaurant catering to all demography.|+12012615620                   |+12894011700               |00                |+14039153986        |+13063742233       |(519) 771-8508\"\"   |,                    |,               |\"OJSC \\Uralkali\\ (OJSC \"\"Uralkali\\\"\" Company\"\")\"\"\"            |,           |,                    |12042940005   |12012201342          |\"\\KONTsERN RADIOSTROENIIa \\VEGA\"\".\"\"\"                        |Chemicals  |ATVs Dealers & Services|\n",
      "|max    |Â \"\".edmonton|ＵＥＭＵＲＡ ＳＴＵＤＩＯ 2 Chome-1-10 Hachiken 4 Jonishi, Nishi Ward, Sapporo, Hokkaido 063-0844|Zoo                    |zywiec|zw          |Åland       |🧵 Atelier de Couture Karine Mascouche -Sur Rendez-vous|+998951439555       |zw                |２３ 87, Asahidai                                                                      |99 06 785 7651|zu         |zurich     |高崎市上小塙町 Gunma, Japan · +81 27-344-2311 Closed ⋅ Opens 9:30AM Tue In-store shopping      |ze1 0ex           |åland  |📞+7 (8482) 20-83-61 ✉️e-mail:info@teko-filter.ru 🔎самарская область, г. тольятти  ул. ульяны громовой 33а, 445045, tolyatti, samara oblast, russia, samara oblast|‏دالاس‏، ‏تكساس‏، ‏الولايات المتحدة‏|zwolle       |zw              |zimbabwe                               |🧹 Cleaning Job Opportunity 🧹 We’re looking for a superstar part-time cleaner (36 hours per fortnight) for the Margaret River Library! Do you fit the bill? The successful applicant will take pride in their work and have an eye for attention to detail. Preference will be given to candidates with public and/or commercial cleaning experience.... Applications close Friday 4 June at 4pm. Apply here (bit.ly/3fAPVpX) or contact Heather Auld on 9780 5601 for more information|zyara.mc@gmail.com        |vn                     |𝗢𝗣𝗨𝗦 𝗔𝗥𝗧 𝗣𝗥𝗢𝗝𝗘𝗖𝗧𝗦|turkey                                                                             |matt@kmspropertymaintenance.com|za                         |zj                |zurich              |yo88ry             |Â \"\"               |za                   |yorktown heights|æ ªå¼ä¼šç¤¾ãƒ¦ãƒ‹ãƒžãƒƒãƒˆãƒ©ã‚¤ãƒ•ï½œUNIMAT LIFE CORPORATION|zwolle      |zimbabwe             |zurich        |vn                   |í•˜ì½”ë„¤ ì „ë¬¸ ì—¬í–‰ì‚¬, ìžìœ ì—¬í–‰ | ì˜¤ë‹¤ííŠ¸ëž˜ë¸”|zw         |Zoo                    |\n",
n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/pyspark/sql/column.py:460: FutureWarning: A column as 'key' in getItem is deprecated as of Spark 3.0, and will not be supported in the future release. Use `column[key]` or `column.key` syntax instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final merged dataset (after conflict resolution, imputation, and standardization):\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
n",
      "|summary|domain       |address                                                                                                                                                            |category                            |city  |country_code|country_name|name                      |phone                |phone_country_code|raw_address                                                                            |raw_phone     |region_code|region_name|text                                                                                           |zip_code            |country              |\n",
n",
      "|count  |431884       |431999                                                                                                                                                             |407904                              |431999|431999      |431999      |391988                    |431999               |431999            |311875                                                                                 |328160        |310854     |310854     |353005                                                                                         |431999              |407182               |\n",
      "|mean   |NULL         |62684.555555555555                                                                                                                                                 |31047.25                            |NaN   |1.0         |NULL        |1.0434034074484427E11     |1.2198500587641814E11|1.0               |NULL                                                                                   |NULL          |NaN        |NULL       |NULL                                                                                           |2.52685141797091E7  |1.1325712714124243E11|\n",
      "|stddev |NULL         |115848.03076348678                                                                                                                                                 |16840.09598893862                   |NaN   |0.0         |NULL        |2.5312470604653375E11     |3.1954718624608687E12|0.0               |NULL                                                                                   |NULL          |NaN        |NULL       |NULL                                                                                           |3.4549545773609333E9|2.5831992150195193E11|\n",
      "|min    |             |                                                                                                                                                                   |07000                               |'aiea |001         |Unknown     |!MPACT Theatre            |                     |001               |\"... more bottles, and I try to ration it like it's water in the Sahara, but if it ...\"|(01) 444 5995 |00         |aargau     |#05 Mac Arthur Highway, Paraiso,, #05 MacArthur Highway Closed ⋅ Opens 8:30AM · +63 45 985 0220|+13063742233        |,                    |\n",
      "|max    |Â \"\".edmonton|📞+7 (8482) 20-83-61 ✉️e-mail:info@teko-filter.ru 🔎самарская область, г. тольятти  ул. ульяны громовой 33а, 445045, tolyatti, samara oblast, russia, samara oblast|‏دالاس‏، ‏تكساس‏، ‏الولايات المتحدة‏|zywiec|zw          |Åland       |🥇Béton Surface Lanaudière|999+11               |zw                |２３ 87, Asahidai                                                                      |99 06 785 7651|zu         |zurich     |高崎市上小塙町 Gunma, Japan · +81 27-344-2311 Closed ⋅ Opens 9:30AM Tue In-store shopping      |ze10ex              |åland                |\n",
n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total rows: 431999\n",
      "\n",
      "Missing value percentages:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "domain: 0.03%\n",
      "address: 0.00%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "category: 5.58%\n",
      "city: 0.00%\n",
      "country_code: 0.00%\n",
      "country_name: 0.00%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name: 9.26%\n",
      "phone: 0.00%\n",
      "phone_country_code: 0.00%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "raw_address: 27.81%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "raw_phone: 24.04%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "region_code: 28.04%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "region_name: 28.04%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "text: 18.29%\n",
      "zip_code: 0.00%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "country: 5.74%\n",
      "\n",
      "Unique values in key columns:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "country: 447\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "category: 10481\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 642:===========>                                             (1 + 4) / 5]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Merged dataset saved as 'merged_company_data.csv' in the /kaggle/working directory\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    datasets = load_datasets()\n",
    "    \n",
    "    for key, df in datasets.items():\n",
    "        datasets[key] = preprocess_data(df, key)\n",
    "        datasets[key] = standardize_country(datasets[key])\n",
    "    \n",
    "    print(\"Datasets loaded. Sample of each:\")\n",
    "    for key, df in datasets.items():\n",
    "        print(f\"\\n{key.capitalize()} dataset:\")\n",
    "        df.show(5, truncate=False)\n",
    "        print(f\"{key.capitalize()} schema:\")\n",
    "        df.printSchema()\n",
    "    \n",
    "    merged_df = merge_datasets(datasets)\n",
    "    \n",
    "    print(\"\\nMerged dataset (before conflict resolution):\")\n",
    "    merged_df.describe().show(5, truncate=False)\n",
    "    \n",
    "    resolved_df = resolve_conflicts(merged_df)\n",
    "    \n",
    "    # Apply imputation and standardization\n",
    "    final_df = impute_missing_values(resolved_df)\n",
    "    final_df = standardize_data(final_df)\n",
    "    \n",
    "    print(\"\\nFinal merged dataset (after conflict resolution, imputation, and standardization):\")\n",
    "    final_df.describe().show(5, truncate=False)\n",
    "    \n",
    "    data_quality_checks(final_df)\n",
    "    \n",
    "    final_df.write.csv('/kaggle/working/merged_company_data.csv', header=True, mode='overwrite')\n",
    "    print(\"Merged dataset saved as 'merged_company_data.csv' in the /kaggle/working directory\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb3dbe9c",
   "metadata": {
    "papermill": {
     "duration": 0.038242,
     "end_time": "2024-09-27T15:15:11.586944",
     "exception": false,
     "start_time": "2024-09-27T15:15:11.548702",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In our main function, we:\n",
    "1. Load all datasets\n",
    "2. Display samples and schemas of each dataset for verification\n",
    "3. Merge the datasets\n",
    "4. Resolve conflicts\n",
    "5. Display the final merged dataset\n",
    "6. Save the result to a CSV file\n",
    "\n",
    "This process gives us a comprehensive view of our data at each stage, allowing us to verify the results of each step.\n",
    "\n",
    "## Next Steps\n",
    "\n",
    "Now that we have our merged and cleaned dataset, I can proceed with further analysis, visualization, and insights generation, as demonstrated in the subsequent parts of this notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54bd8bc6",
   "metadata": {
    "papermill": {
     "duration": 0.037545,
     "end_time": "2024-09-27T15:15:11.674721",
     "exception": false,
     "start_time": "2024-09-27T15:15:11.637176",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Analysis and Insights\n",
    "\n",
    "Now that I have merged our datasets and resolved conflicts, let's perform some analysis on our final dataset to gain insights about the companies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "24d01e7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:15:11.792349Z",
     "iopub.status.busy": "2024-09-27T15:15:11.791812Z",
     "iopub.status.idle": "2024-09-27T15:15:33.141116Z",
     "shell.execute_reply": "2024-09-27T15:15:33.139283Z"
    },
    "papermill": {
     "duration": 21.430178,
     "end_time": "2024-09-27T15:15:33.144523",
     "exception": false,
     "start_time": "2024-09-27T15:15:11.714345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Basic statistics of the merged dataset:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-------------------+--------------------+--------------------+------+------------+------------+--------------------+--------------------+------------------+--------------------+--------------+-----------+-----------+---------------------------+-------------------+--------------------+\n",
      "|summary|             domain|             address|            category|  city|country_code|country_name|                name|               phone|phone_country_code|         raw_address|     raw_phone|region_code|region_name|                       text|           zip_code|             country|\n",
      "+-------+-------------------+--------------------+--------------------+------+------------+------------+--------------------+--------------------+------------------+--------------------+--------------+-----------+-----------+---------------------------+-------------------+--------------------+\n",
      "|  count|             431883|              431997|              407904|431999|      431999|      431999|              391988|              395056|            431999|              311875|        328160|     310854|     310854|                     353005|             431999|              407182|\n",
      "|   mean|               NULL|  62684.555555555555|            31047.25|   NaN|         1.0|        NULL|1.043403407448442...|1.219850058764180...|               1.0|                NULL|          NULL|        NaN|       NULL|                       NULL| 2.52685141797091E7|1.132571271412424...|\n",
      "| stddev|               NULL|  115848.03076348678|   16840.09598893862|   NaN|         0.0|        NULL|2.531247060465337...|3.195471862460868E12|               0.0|                NULL|          NULL|        NaN|       NULL|                       NULL|3.454954577360934E9|2.583199215019519...|\n",
      "|    min|(519) 771-8508\"\".ca|\"... more bottles...|               07000| 'aiea|         001|     Unknown|      !MPACT Theatre|        +12012017300|               001|\"... more bottles...| (01) 444 5995|         00|     aargau|       #05 Mac Arthur Hi...|       +13063742233|                   ,|\n",
      "|    max|      Â \"\".edmonton|📞+7 (8482) 20-83...|‏دالاس‏، ‏تكساس‏،...|zywiec|          zw|       Åland|🥇Béton Surface L...|              999+11|                zw|   ２３ 87, Asahidai|99 06 785 7651|         zu|     zurich|高崎市上小塙町 Gunma, Ja...|             ze10ex|               åland|\n",
      "+-------+-------------------+--------------------+--------------------+------+------------+------------+--------------------+--------------------+------------------+--------------------+--------------+-----------+-----------+---------------------------+-------------------+--------------------+\n",
      "\n",
      "Number of companies per country:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+------+\n",
      "|       country| count|\n",
      "+--------------+------+\n",
      "| united states|146250|\n",
      "|        canada|139974|\n",
      "|united kingdom| 47428|\n",
      "|          NULL| 24817|\n",
      "|     australia| 16150|\n",
      "|        france| 10647|\n",
      "|       germany|  3183|\n",
      "|   new zealand|  2222|\n",
      "|       belgium|  1917|\n",
      "|        turkey|  1914|\n",
      "+--------------+------+\n",
      "only showing top 10 rows\n",
      "\n",
      "Top 10 company categories:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 651:>                                                        (0 + 4) / 4]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-----+\n",
      "|            category|count|\n",
      "+--------------------+-----+\n",
      "|Tech Companies|Te...|72035|\n",
      "|                NULL|24095|\n",
      "|              Hotels|13515|\n",
      "|Executive, Legisl...|10703|\n",
      "| Business Consulting| 7640|\n",
      "|Clinics - Surgeon...| 7537|\n",
      "|Social Services &...| 6456|\n",
      "|       Auto Services| 5872|\n",
      "|Colleges & Univer...| 4820|\n",
      "|Industrial Machin...| 4412|\n",
      "+--------------------+-----+\n",
      "only showing top 10 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "# Get the final merged dataset\n",
    "final_df = spark.read.csv('/kaggle/working/merged_company_data.csv', header=True, inferSchema=True)\n",
    "\n",
    "# Display basic statistics\n",
    "print(\"Basic statistics of the merged dataset:\")\n",
    "final_df.describe().show()\n",
    "\n",
    "# Count the number of companies per country\n",
    "print(\"Number of companies per country:\")\n",
    "final_df.groupBy(\"country\").count().orderBy(\"count\", ascending=False).show(10)\n",
    "\n",
    "# Analyze category distribution\n",
    "print(\"Top 10 company categories:\")\n",
    "final_df.groupBy(\"category\").count().orderBy(\"count\", ascending=False).show(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e9ed3eb",
   "metadata": {
    "papermill": {
     "duration": 0.039847,
     "end_time": "2024-09-27T15:15:33.238041",
     "exception": false,
     "start_time": "2024-09-27T15:15:33.198194",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Observations\n",
    "\n",
    "1. **Country Distribution**: From the country distribution, we can see which countries have the most companies in our dataset. This gives us an idea of the geographical spread of our data.\n",
    "\n",
    "2. **Category Analysis**: The category distribution shows us the most common types of businesses in our dataset. This can be useful for understanding the industry landscape represented in our data.\n",
    "\n",
    "I will dive deeper into some specific aspects of our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a925bf6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:15:33.317112Z",
     "iopub.status.busy": "2024-09-27T15:15:33.316706Z",
     "iopub.status.idle": "2024-09-27T15:15:54.687193Z",
     "shell.execute_reply": "2024-09-27T15:15:54.686053Z"
    },
    "papermill": {
     "duration": 21.414977,
     "end_time": "2024-09-27T15:15:54.691939",
     "exception": false,
     "start_time": "2024-09-27T15:15:33.276962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Companies with multiple phone numbers:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+-----+\n",
      "|name|phone|\n",
      "+----+-----+\n",
      "+----+-----+\n",
      "\n",
      "Missing values in each column:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "domain: 116\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "address: 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "category: 24095\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "city: 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "country_code: 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "country_name: 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name: 40011\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "phone: 36943\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "phone_country_code: 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "raw_address: 120124\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "raw_phone: 103839\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "region_code: 121145\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "region_name: 121145\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "text: 78994\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "zip_code: 0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "country: 24817\n",
      "Top 10 domain TLDs:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 704:>                                                        (0 + 4) / 4]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+------+\n",
      "|tld| count|\n",
      "+---+------+\n",
      "|com|240330|\n",
      "| ca| 54692|\n",
      "|org| 31670|\n",
      "| uk| 21886|\n",
      "|gov| 15428|\n",
      "| au| 12076|\n",
      "|edu|  8481|\n",
      "| fr|  5627|\n",
      "|net|  4183|\n",
      "| us|  3286|\n",
      "+---+------+\n",
      "only showing top 10 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "# Analyze companies with multiple phone numbers\n",
    "print(\"Companies with multiple phone numbers:\")\n",
    "multi_phone_df = final_df.filter(\n",
    "    (F.col(\"phone\").contains(\";\")) |\n",
    "    (F.col(\"phone\").contains(\",\")) |\n",
    "    (F.col(\"phone\").contains(\"|\")) |\n",
    "    (F.col(\"phone\").rlike(r\"\\s\"))\n",
    ")\n",
    "multi_phone_df.select(\"name\", \"phone\").show(10, truncate=False)\n",
    "\n",
    "# Check for missing values\n",
    "print(\"Missing values in each column:\")\n",
    "for column in final_df.columns:\n",
    "    missing_count = final_df.filter(F.col(column).isNull()).count()\n",
    "    print(f\"{column}: {missing_count}\")\n",
    "\n",
    "# Analyze domain TLDs\n",
    "from pyspark.sql.functions import split, element_at\n",
    "\n",
    "print(\"Top 10 domain TLDs:\")\n",
    "final_df = final_df.filter(F.col(\"domain\").isNotNull())\n",
    "final_df.withColumn(\"tld\", element_at(split(col(\"domain\"), \"\\\\.\"), -1)) \\\n",
    "    .groupBy(\"tld\").count().orderBy(\"count\", ascending=False).show(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e6054b3",
   "metadata": {
    "papermill": {
     "duration": 0.043877,
     "end_time": "2024-09-27T15:15:54.792868",
     "exception": false,
     "start_time": "2024-09-27T15:15:54.748991",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Further Insights\n",
    "\n",
    "1. **Multiple Phone Numbers**: Some companies could have multiple phone numbers listed. This could indicate multiple branches, departments, or international presence.\n",
    "\n",
    "2. **Missing Data**: By checking for missing values, we can identify which fields might need further data collection or imputation.\n",
    "\n",
    "3. **Domain Analysis**: Analyzing the Top-Level Domains (TLDs) gives us another perspective on the geographical or organizational distribution of the companies.\n",
    "\n",
    "Next, we shall visualize some of the findings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "21b6b10f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T15:15:54.949927Z",
     "iopub.status.busy": "2024-09-27T15:15:54.949217Z",
     "iopub.status.idle": "2024-09-27T15:15:58.891663Z",
     "shell.execute_reply": "2024-09-27T15:15:58.890484Z"
    },
    "papermill": {
     "duration": 4.058089,
     "end_time": "2024-09-27T15:15:58.894629",
     "exception": false,
     "start_time": "2024-09-27T15:15:54.836540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Count companies per standardized country\n",
    "country_counts = final_df.groupBy('country').count().orderBy('count', ascending=False)\n",
    "\n",
    "# Convert to Pandas for visualization\n",
    "pandas_df = country_counts.toPandas()\n",
    "\n",
    "# Remove 'unknown' from the plot and get top 10\n",
    "pandas_df = pandas_df[pandas_df['country'] != 'unknown'].head(10)\n",
    "\n",
    "# Plot top 10 countries (excluding 'unknown')\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(x='country', y='count', data=pandas_df)\n",
    "plt.title('Top 10 Countries by Number of Companies (Excluding Unknown)')\n",
    "plt.xlabel('Country')\n",
    "plt.ylabel('Number of Companies')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9541743f",
   "metadata": {
    "papermill": {
     "duration": 0.044788,
     "end_time": "2024-09-27T15:15:58.984268",
     "exception": false,
     "start_time": "2024-09-27T15:15:58.939480",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Visualization Insights\n",
    "\n",
    "The bar plot provides a visual representation of the geographical distribution of companies in our dataset. This can help in quickly identifying which countries are most represented and may guide further analysis or business decisions.\n",
    "\n",
    "## Conclusion and Next Steps\n",
    "\n",
    "Through this analysis, I've gained several insights into our merged company dataset:\n",
    "\n",
    "1. I've identified the most common countries and categories represented in our data.\n",
    "2. I've tried to discover companies with multiple phone numbers, which would indicate larger or more complex organizations.\n",
    "3. I've analyzed the completeness of our data by checking for missing values.\n",
    "4. I've examined the distribution of domain TLDs, providing another perspective on company characteristics.\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5537447,
     "sourceId": 9164807,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 287.345539,
   "end_time": "2024-09-27T15:16:01.652450",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-27T15:11:14.306911",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
